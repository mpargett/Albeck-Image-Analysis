%IMAN_NAMING
%   Naming conventions for Filters and Fluorophores
%   
%   [fpn, ftn] = iman_naming()
%       To get cell arrays with current naming conventions and regular
%       expression maps.

function [fpn, ftn] = iman_naming(varargin)
%Version check provision after name definitions

%Define Fluorophore names, to support consistency
fpn = { 'DAPI',         'dapi'; ...
        'mTagBFP2',     'm?(tag)?bfp2?';...
        'SECFP',        's?e?\s?cfp'; ...
        'mCer',         'm?cer(ulean)?\D*$'; ...
        'mCer3',        'm?cer(ulean)?\s*3\D*$'; ...
        'mTurq2',       'm?turq(uoise)?\s*2?\D*$'; ...
        'TSap',         't?.?sap(phire)?'; ...
        'mNeon',        'm?neon(gre?e?n)?';...
        'YPet',         'y\s?pet'; ...
        'EYFP',         'e?\s?yfp'; ...
%         'EGFP',         'e\s?gfp'; ...
%         'Emerald',      'emer(ald)?'; ...
%         'Clover',       'clov(er)?'; ...
        'mVenus',       'm?ven(us)?'; ...
        'mOrange2',     'm?orange2?'; ...
        'mCherry',      'm?che?(rry)?'; ...
        'mKate2',       'm?kate?2?'; ...
        'mCardinal',    'm?card?(inal)?'; ...
        'Cy3',          'cy\s*3\D*$'; ...
%         'Cy5',          'cy\s*5\D*$'; ...
        'NBDG',         'nbdg$'; ...
        'Fluorescein',  'fluorescein|fitc$'; ...
        'Alex405',      'alexa?(fluor)?\s*405\D*$'; ...
        'Alex488',      'alexa?(fluor)?\s*488\D*$'; ...
        'Alex546',      'alexa?(fluor)?\s*546\D*$'; ...
        'Alex594',      'alexa?(fluor)?\s*594\D*$'; ...
        'Alex633',      'alexa?(fluor)?\s*633\D*$'; ...
        'Alex647',      'alexa?(fluor)?\s*647\D*$'; ...
        'Alex680',      'alexa?(fluor)?\s*680\D*$'          };

%Define Filter names, to support consistency
ftn = { 'Filter_DAPI',         'dapi'; ...
        'Filter_BFP',          'bfp'; ...
        'Filter_CFP',          '(49001)|cfp'; ...
        'Filter_Sapphire',     'sap(phire)?'; ...
        'Filter_GFP',          'gfp$'; ...
%         'Filter_GFPn',         'gfpn(arrow)?'; ...
        'Filter_YFP',          '(49003)|yfp$'; ...
%         'Filter_YFP2',         'yfp2';...
        'Filter_Orange',       'orange'; ...
        'Filter_Cherry',       '(49005)|che?(rry)?(\s|_|-){0,3}$'; ...
        'Filter_Cherry2',      'che?(rry)?(\s|_|-){0,3}2|tritc'; ... TEMPORARY 'tritc'
        'Filter_Cherry41043',  '(41043)|che?(rry)?(\s|_|-){0,3}4';
        'Filter_Cy5',          'cy\s?5'           };

%Version check and name validation function
if nargin > 0
    if strcmpi(varargin{1},'version'); fpn = 'v1.0'; return; 
    elseif strcmpi(varargin{1},'validate'); nmi = [fpn; ftn];
        fpn = cellfun(@(x)any(strcmp(x, nmi(:,1))), varargin(2:end));
        if nargout == 2; ftn = varargin(2:end); 
            for s = find(~fpn);  ftn{s} = nmi{~cellfun(@isempty, ...
                    regexpi(ftn{s}, nmi(:,2))), 1};  end
        end
    end
end
    
end